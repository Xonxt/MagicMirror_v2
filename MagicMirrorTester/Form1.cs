using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;

using MagicMirrorNETWrapper;

namespace MagicMirrorTester
{
    enum ImageType
    {
        Skeleton = 0,
        Depth = 1,
        Rgb = 2
    }

    public partial class Form1 : Form
    {
        private PoseRecognizer poseRecognizer;
        private Timer timer;
        private bool initialized = false;        
        
        private ImageType toggleType = ImageType.Skeleton;

        public Form1()
        {
            InitializeComponent();
            
            timer = new Timer();
            timer.Interval = 1;
            timer.Tick += Timer_Tick;

            poseRecognizer = new PoseRecognizer();

            try
            {
                if (poseRecognizer.initialize())
                {
                    initialized = true;
                    timer.Start();
                }
            }
            catch
            {
                MessageBox.Show("Couln't initialize pose recognizer!");
            }

            updateList();
        }

        // update the list of currently available poses:
        private void updateList()
        {
            comboBox1.Items.Clear();

            var files = Directory.GetFiles("instruments/", "*.txt");

            foreach (var file in files)
            {
                using (System.IO.StreamReader reader = new StreamReader(file))
                {
                    string name = reader.ReadLine();

                    comboBox1.Items.Add(name);
                }

            }
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            // check if the PoseRecognized is properly initialized
            if (!initialized)
                return;


            // a boolean flag to see if the next frame from the Kinect was successfully processed
            bool nextFrame = false;

            try
            {
                // try to process the next frame from the Kinect
                // this will do everyintg: detect people, extract skeletons/joints, 
                // recognize the current pose, etc.
                nextFrame = poseRecognizer.processNextFrame();
            }
            catch
            {
                MessageBox.Show("next frame exception");
                timer.Stop();
                return;
            }

            if (nextFrame)
            {
                Bitmap frame = null;
                try
                {
                    // this is how you can extract the current frame (image) from the Kinect
                    switch (toggleType)
                    {
                        case ImageType.Skeleton:
                            // extract the "index" image with the user's outline and overlaid skeleton
                            frame = poseRecognizer.getSkeletonImage();
                            break;
                        case ImageType.Rgb:
                            // extract the normal 1080p RGB frame
                            frame = poseRecognizer.getRgbFrame();
                            break;
                        case ImageType.Depth:
                            // extract the depth map 
                            frame = poseRecognizer.getDepthMap();
                            break;
                        default:
                            break;
                    }

                }
                catch
                {
                    MessageBox.Show("get frame exception");
                }               

                bool userPresent = false;
                try
                {
                    // check if there is at least one user present in the Kinect's point of view
                    userPresent = poseRecognizer.userPresent();
                }
                catch
                {
                    MessageBox.Show("user present exception");
                }

                label2.Text = "User present: " + userPresent.ToString();

                if (userPresent)
                {
                    /* 
                     * populate the list of currently seen users:
                     * this list will only contain the 64-bit (8-byte) IDs of the users
                     * these IDs are generated by the Kinect API and are unique for every
                     * currently tracked user
                     * You can use these IDs to check how many users are present and
                     * to access the properties (pose, hands, etc.) for specific users by IDs
                     */ 
                    UInt64[] list = poseRecognizer.getUserList();                                        
                    
                    try
                    {
                        // this will recognize the pose (out of all available ones) for THE FIRST SEEN user
                        label5AllPoses.Text = poseRecognizer.getPoseName();

                        // You can also ask to recognize the pose of a specific user by his ID:
                        // string poseName = poseRecognizer.getPoseName(list[0]);

                        // recognize one specified pose and get the similarity score in range [0..1]:
                        if (comboBox1.Text != "")
                        {
                            string poseName = comboBox1.Text;

                            // "expectPose(String poseName)" will return the similarity score for the pose in range [0..1]
                            // this is also done for THE FIRST AVAILABLE user (i.e. the user that was seen first by the Kinect)
                            label3.Text = poseName.ElementAt<char>(0) + ": " + poseRecognizer.expectPose(poseName);

                            // again, we can do that for a specific user:
                            // double score = poseRecognizer.expectPose(list[0], "Flute");

                            /*
                             * For every user there's also a whole bunch of properties available, such as:
                             * - hand state (unknown, untracked, open, closed, lasso)
                             * - is the hand moving? (boolean)
                             * - hand movement speed (I think it's in m/sec, but I'm not sure)
                             * - hand movement direction (up, down, left, right, forwards, backwards)
                             * - did the hand just change movement direction?
                             */
                            Direction rightHandMovementDirection = poseRecognizer.getHandDirection(list[0], Hand.RIGHT);
                            if (rightHandMovementDirection == Direction.RIGHT) {
                                // Hand is moving right
                            }

                            double rightHandMovementSpeed = poseRecognizer.getHandMovementSpeed(list[0], Hand.RIGHT);
                            if (rightHandMovementSpeed > 0.85) {
                                // the hand is moving very fast!
                            }

                            bool isRightHandMoving = poseRecognizer.isHandMoving(list[0], Hand.RIGHT);
                            if (!isRightHandMoving) {
                                // right hand stopped moving
                            }

                            bool rightHandChangedMovementDirection = poseRecognizer.handChangedDirection(list[0], Hand.RIGHT);
                            if (rightHandChangedMovementDirection) {
                                // hand changed direction! Do something! Play a different sound, show some effect!
                            }

                            HandState rightHandState = poseRecognizer.getHandState(list[0], Hand.RIGHT);
                            if (rightHandState == HandState.Closed) {
                                // right hand is clenched into a fist!
                            }
                        }

                        // see how the joints for the user are extracted:
                        if (toggleType == ImageType.Skeleton)
                            drawSkeleton(ref frame);
                    }
                    catch (NullReferenceException ex)
                    {
                        MessageBox.Show("get pose exception");
                    }
                }

                pictureBox1.Image = frame as Image;
            }

            timer.Start();
        }

        /// <summary>
        /// An examle of how the joint coordinated for the user can be extracted and used for something
        /// </summary>
        /// <param name="image"></param>
        private void drawSkeleton(ref Bitmap image)
        {
            List<PointF> points = new List<PointF>();

            try
            {
                points.Add(poseRecognizer.getJointScene(KinectJoint.Head));
                points.Add(poseRecognizer.getJointScene(KinectJoint.Neck));
                points.Add(poseRecognizer.getJointScene(KinectJoint.RightShoulder));
                points.Add(poseRecognizer.getJointScene(KinectJoint.RightElbow));
                points.Add(poseRecognizer.getJointScene(KinectJoint.RightHand));
                points.Add(poseRecognizer.getJointScene(KinectJoint.LeftShoulder));
                points.Add(poseRecognizer.getJointScene(KinectJoint.LeftElbow));
                points.Add(poseRecognizer.getJointScene(KinectJoint.LeftHand));

                points.Add(poseRecognizer.getJointScene(KinectJoint.Torso));
                points.Add(poseRecognizer.getJointScene(KinectJoint.LeftHip));
                points.Add(poseRecognizer.getJointScene(KinectJoint.RightHip));
                points.Add(poseRecognizer.getJointScene(KinectJoint.LeftKnee));
                points.Add(poseRecognizer.getJointScene(KinectJoint.RightKnee));
                points.Add(poseRecognizer.getJointScene(KinectJoint.LeftFoot));
                points.Add(poseRecognizer.getJointScene(KinectJoint.RightFoot));
            }
            catch
            {
                MessageBox.Show("get point exception");
            }

            try
            {
                using (Graphics g = Graphics.FromImage(image))
                {
                    g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;

                    using (Pen pen = new Pen(Color.Blue, 5))
                    {
                        g.DrawLine(pen, points[0], points[1]);
                        g.DrawLine(pen, points[1], points[2]);
                        g.DrawLine(pen, points[2], points[3]);
                        g.DrawLine(pen, points[3], points[4]);
                        g.DrawLine(pen, points[1], points[5]);
                        g.DrawLine(pen, points[5], points[6]);
                        g.DrawLine(pen, points[6], points[7]);

                        g.DrawLine(pen, points[1], points[8]);
                        g.DrawLine(pen, points[8], points[9]);
                        g.DrawLine(pen, points[8], points[10]);
                        g.DrawLine(pen, points[9], points[11]);
                        g.DrawLine(pen, points[10], points[12]);
                        g.DrawLine(pen, points[11], points[13]);
                        g.DrawLine(pen, points[12], points[14]);
                    }

                    using (Pen pen = new Pen(Color.Red, 7))
                    {
                        foreach (var point in points)
                        {
                            g.DrawEllipse(pen, new RectangleF(point, new SizeF(3, 3)));
                        }
                    }
                }
            }
            catch
            {
                MessageBox.Show("drawing exception");
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            toggleType++;

            if ((int)toggleType > 2)
                toggleType = 0;

            switch (toggleType)
            {
                case ImageType.Skeleton:
                    button3.Text = "Skeleton";
                    break;
                case ImageType.Rgb:
                    button3.Text = "RGB";
                    break;
                case ImageType.Depth:
                    button3.Text = "Depth";
                    break;
                default:
                    break;
            }
        }

        private void buttonAddPose_Click(object sender, EventArgs e)
        {
            if (textBox1.Text != "" && initialized)
            {
                // this is an example of creating a new pose!
                // warning: if you create a new pose, you need to delete the "svm.dat" file to
                // re-train the classification algorithm!
                poseRecognizer.addNewPose(textBox1.Text);
                MessageBox.Show("Pose '" + textBox1.Text + "' added! Delete the 'svm.dat' file to retrain the algorithm next time this app is launched!");
                updateList();
            }
        }

        private void Form1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.B && initialized)
            {
                // save a training sample for the specified pose
                // warning: if you create a new pose, you need to delete the "svm.dat" file to
                // re-train the classification algorithm!
                poseRecognizer.saveTrainingSample(textBox1.Text);
            }
        }

        private void Form1_Resize(object sender, EventArgs e)
        { // 925; 572
            if ((gapXX + gapX) == 0)
                return;

            panel1.Left = this.Width - panel1.Width - gapXX;
            pictureBox1.Width = panel1.Left - gapX - pictureBox1.Left;
            pictureBox1.Height = this.Height - pictureBox1.Top - gapY;
        }

        private int gapX = 0, gapXX = 0, gapY = 0;
        private void Form1_Load(object sender, EventArgs e)
        {
            gapX = panel1.Left - (pictureBox1.Left + pictureBox1.Width);
            gapXX = this.Width - panel1.Right;
            gapY = this.Height - (pictureBox1.Top + pictureBox1.Height);
        }
        
        private void button1_Click_1(object sender, EventArgs e)
        {
            // save a training sample for the specified pose
            // warning: if you create a new pose, you need to delete the "svm.dat" file to
            // re-train the classification algorithm!
            if (textBox1.Text != "" && initialized)
                poseRecognizer.saveTrainingSample(textBox1.Text);
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            textBox1.Text = comboBox1.Text;
        }

        private Rectangle oldBoundsWindow, oldBoundsPictureBox;
        // Double-click on the Picture box
        private void pictureBox1_DoubleClick(object sender, EventArgs e)
        {
            if (WindowState == FormWindowState.Normal)
            {      
                oldBoundsWindow = this.Bounds;
                oldBoundsPictureBox = pictureBox1.Bounds;

                this.WindowState = FormWindowState.Maximized;
                FormBorderStyle = FormBorderStyle.None;

                TopMost = true;
                Left = Top = 0;
                Width = Screen.PrimaryScreen.WorkingArea.Width;
                Height = Screen.PrimaryScreen.WorkingArea.Height;                

                panel1.Visible = false;
                
                pictureBox1.Left = pictureBox1.Top = 0;
                pictureBox1.Width = this.Width;
                pictureBox1.Height = this.Height;
            }
            else
            {
                WindowState = FormWindowState.Normal;
                FormBorderStyle = FormBorderStyle.Sizable;
                TopMost = false;

                panel1.Visible = true;

                this.Bounds = oldBoundsWindow;
                pictureBox1.Bounds = oldBoundsPictureBox;
            }




        }
    }
}
